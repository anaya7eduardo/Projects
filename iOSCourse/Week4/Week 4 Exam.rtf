{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\froman\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\froman\fprq2\fcharset0 Liberation Mono{\*\falt Courier New};}{\f6\froman\fprq2\fcharset0 Times-Roman{\*\falt Times New Roman};}{\f7\froman\fprq2\fcharset0 Helvetica{\*\falt Arial};}{\f8\froman\fprq2\fcharset0 Helvetica-Bold;}{\f9\froman\fprq2\fcharset0 Helvetica-Oblique;}{\f10\fnil\fprq2\fcharset0 PingFang SC;}{\f11\fnil\fprq2\fcharset0 Liberation Mono{\*\falt Courier New};}{\f12\fnil\fprq2\fcharset0 0;}{\f13\fnil\fprq2\fcharset0 Arial Unicode MS;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red27\green31\blue34;\red44\green44\blue44;\red31\green31\blue31;}
{\stylesheet{\s0\snext0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052 Normal;}
{\*\cs15\snext15 Numbering Symbols;}
{\*\cs16\snext16\rtlch\af11 \ltrch\hich\af5\loch\f5\dbch\af11 Source Text;}
{\s17\sbasedon0\snext18\rtlch\af13\afs28\alang1081 \ltrch\lang1033\langfe2052\hich\af4\loch\ql\nowidctlpar\hyphpar0\sb240\sa120\keepn\ltrpar\cf0\f4\fs28\lang1033\kerning1\dbch\af10\langfe2052 Heading;}
{\s18\sbasedon0\snext18\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\sl276\slmult1\nowidctlpar\hyphpar0\sb0\sa140\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052 Text Body;}
{\s19\sbasedon18\snext19\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\sl276\slmult1\nowidctlpar\hyphpar0\sb0\sa140\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052 List;}
{\s20\sbasedon0\snext20\rtlch\af13\afs24\alang1081\ai \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\sb120\sa120\ltrpar\cf0\f3\fs24\lang1033\i\kerning1\dbch\af12\langfe2052 Caption;}
{\s21\sbasedon0\snext21\rtlch\af13\afs24\alang255 \ltrch\lang255\langfe255\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang255\kerning1\dbch\af12\langfe255 Index;}
{\s22\sbasedon0\snext22\rtlch\af11\afs20\alang1081 \ltrch\lang1033\langfe2052\hich\af5\loch\ql\nowidctlpar\hyphpar0\sb0\sa0\ltrpar\cf0\f5\fs20\lang1033\kerning1\dbch\af11\langfe2052 Preformatted Text;}
}{\*\generator LibreOffice/7.2.4.1$MacOSX_X86_64 LibreOffice_project/27d75539669ac387bb498e35313b970b7fe9c4f9}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr2021\mo12\dy10\hr11\min47}{\printim\yr0\mo0\dy0\hr0\min0}}{\*\userprops}\deftab720
\hyphauto1\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1440\pgdscnxt0 Default Page Style;}}
\formshade\paperh15840\paperw12240\margl1440\margr1440\margt1440\margb1440\sectd\sbknone\pgndec\sftnnar\saftnnrlc\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1440\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\qc\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640{\hich\af8\loch\fs36\b\f8\loch
WEEK 4 EXAM}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\qc\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\hich\af7\loch\fs36\b0\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\qc\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640{\hich\af7\loch\fs36\b0\f7\loch
Answer the given questions below in a short answer format.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
1. Explain what is a protocol and why do we use them?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab Protocols are basically a blueprint for }{\hich\af6\loch\scaps0\caps0\fs32\expnd0\expndtw0\i0\b0\kerning0\f6\loch
structs, classes, and enums}{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
, we use them to }{\hich\af6\loch\scaps0\caps0\fs32\expnd0\expndtw0\i0\b0\kerning0\f6\loch
declare the basic functionality we need.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
2. What is a REST-api?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab By definition: Representational State Tranfer-Application Program Interface, is an architectural style that implements HTTP requests to access and use data. }
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
3. How do we get data from it?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab With the GET, PUT, POST and DELETE data types.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
4. What are the different ways we can handle multithreading in iOS?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab With GDC and Semaphores}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
5. What is Core Data?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab Is a framework for manage and store data, also persistency.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
6. What are other ways that you have used Data Persistency?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab With UserDefaults}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
7. How do you make CoreData Thread Safe?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab Accessing a managed object from another queue: pass the ID of the managed object, an instance of the NSManagedObjectID.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
8. What are the different ways we can unwrap an optional?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab f}{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
{\*\bkmkstart __DdeLink__248_2496999231}orce unwrapping, implicitly unwrapping, optional binding, optional chaining, nil coalescing operator, guard statement, optional pattern.{\*\bkmkend __DdeLink__248_2496999231}}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
9. How would you go about creating your own data structure to take the place of an optionals if they didn\u8217\'92t already exist in Swift?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab Though question, but basically a bunch of structs and classes, to express availability of a value.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
9. What is a retain cycle? How do we avoid them?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab Retain Cycles are when two or more objects hold strong references to each other. We avoid them using a weak reference to the object.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
10. How are dispatch groups implemented?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab }{\hich\af6\loch\scaps0\caps0\fs32\expnd0\expndtw0\i0\b0\kerning0\f6\loch
Dispatch groups allow us to monitor a group of tasks as a single unit (asynchronous operations). They are implemented first by creating a group, and then enter(), leave(), notify(queue:) and/or wait(timeout:), this last is a synchronous version of notify. }
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
11. What is Autolayout?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab It is a constraint-based layout system that allows developers to create an adaptive interface, that responds appropriately to changes in screen size and device orientation.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
12. What is a closure? What is the difference between an escaping and non-escaping closure?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
\tab They are self-contained blocks of functionality that can be passed around and used in your code. A closure that can escape (outlive) during the function body execution its known as @escaping but if don't want to escape closure parameters its known as @nonescaping.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af6\loch\fs32\expnd0\expndtw0\b0\kerning0\f6\loch
13. }{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
What are }{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
{\*\bkmkstart __DdeLink__250_2496999231}lazy properties}{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
{\*\bkmkend __DdeLink__250_2496999231}, how do they work?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
\tab I}{\hich\af7\loch\scaps0\caps0\cf19\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
s a property whose initial value is not calculated until the first time it is used.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
14. What are property observers?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
\tab Ar}{\hich\af7\loch\scaps0\caps0\cf19\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
e Swift's way of letting you attach functionality to changes in property values.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
15. What\u8217\'92s the }{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
{\*\bkmkstart __DdeLink__252_2496999231}application and controller lifecycle}{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
{\*\bkmkend __DdeLink__252_2496999231}?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
\tab The application lifecycle describes the whole thing (foreground to background), meanwhile the controller lifecycle describes each viewcontroller structure (appearing to dissapear).}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
16. }{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
{\*\bkmkstart __DdeLink__254_2496999231}How would you store sensitive user data}{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
{\*\bkmkend __DdeLink__254_2496999231}?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
\tab With Keychain or }{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
Biometrics}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf19\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
17. }{\hich\af7\loch\cf18\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
What is a Guard statement?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf18\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
\tab Is a statement used to transfer program control out of scope when certain conditions are not met and also is designed to exit the current function, loop, or condition if the check fails, so any values you unwrap using it will stay around after the check.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af7\loch\cf18\fs28\expnd0\expndtw0\b0\kerning0\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf18\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
18. }{\hich\af7\loch\cf17\fs28\expnd0\expndtw0\b0\kerning0\f7\loch
What is a }{\hich\af9\loch\cf17\fs28\expnd0\expndtw0\i\b0\kerning0\f9\loch
Serial Queue}{\hich\af7\loch\cf17\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf17\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
\tab Also known as private dispatch queues: they execute one task at a time in the order in which they are added to the queue.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\hich\af7\loch\cf18\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf18\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
19. What is the difference between }{\hich\af7\loch\cf18\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
{\*\bkmkstart __DdeLink__256_2496999231}strong, weak, & unowned}{\hich\af7\loch\cf18\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
{\*\bkmkend __DdeLink__256_2496999231}? When do we use them?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\hich\af7\loch\cf18\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
\tab Basically the types on which we can use them: strong[}{\hich\af7\loch\cf18\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
{\*\bkmkstart __DdeLink__258_2496999231}var, let, optional, non-optional}{\hich\af7\loch\cf18\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
{\*\bkmkend __DdeLink__258_2496999231}], weak[var, optional], unowned[var, let, non-optional]. The usage of strong, weak or unowned are actually related to the memory management in Swift called Automatic Reference Counting (ARC). W}{\hich\af7\loch\scaps0\caps0\cf18\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
hen a property is being created, the reference is strong; with the property labelled as weak, it will not increment the reference count; an unowned reference falls in between, they are neither strong nor or type optional: compiler will assume that object is not deallocated as the reference itself remain allocated.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\cf18\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
20. }{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\expnd0\expndtw0\i0\b0\kerning0\f7\loch
 How do we create Singletons in Swift?}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
\tab Are a creational design pattern, which ensures that only one object of its kind exists and provides a single point of access to it for any other code. The most straightforward technique to create a singleton is by defining a global variable.}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
This is the best way to create a singleton in Swift:}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
class API}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
\{}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7
    }{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
static let shared = API()}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7
    }{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
private init()}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7
    }{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
\{}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7
        }{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
// Set up API instance}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7
    }{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
\}}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
\}}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
And here\u8217\'92s how you use the singleton:}
\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch

\par \pard\plain \s0\rtlch\af13\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\ql\nowidctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af12\langfe2052\loch\ql{\rtlch\afs28 \ltrch\hich\af7\loch\fs28\f7\loch
API.shared.doSomething()}
\par }